<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <name>%IOAtypeName</name>
  <shortName>%IOAtypeShortName</shortName>
  <description>%IOAtypeDescription</description>
  <abbreviation>io</abbreviation>
  <alias>io</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <iconClass>arrow-long-opposite-v solid</iconClass>
  <property name="helpId">intel.phe.configs.io_analysis</property>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:if test="not (exsl:ctx('targetOS') = 'Linux' or exsl:ctx('targetOS') = 'FreeBSD' or exsl:ctx('targetOS') = 'Android')">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsOnlyForLinux')"/>
  </xsl:if>
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=group_generic')"/>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="">
  <xsl:variable name="commonKnobs" select="document('config://analysis_type/include/knobs.xsl?defaultMemoryBandwidth=true&amp;defaultPCIeBandwidth=true')"/>
  <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
  <xsl:variable name="MmioAccessEvents" select="$pmuCommon//variables/MmioAccessEvents"/>
  <xsl:variable name="IommuEvents" select="$pmuCommon//variables/IommuEvents"/>
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%DiskIOViewpointName</defaultValue>
  </stringKnob>
  <stringKnob id="allowedViewpoints" boolean:visible="false">
   <defaultValue>%DiskIOViewpointName</defaultValue>
  </stringKnob>
  <groupKnob id="groupForCustomControl0">
   <description>%SelectPlatformMetrics</description>
   <knobs>
    <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectPCIeBW']"/>
    <xsl:if test="$MmioAccessEvents and $MmioAccessEvents != ''">
     <booleanKnob id="collectMmio" displayName="%CollectMmioAccess" boolean:visible="true" cliName="mmio">
      <description>%CollectMmioAccessDescription</description>
      <boolean:defaultValue>false</boolean:defaultValue>
     </booleanKnob>
    </xsl:if>
    <xsl:if test="$IommuEvents and $IommuEvents != ''">
     <booleanKnob id="collectIommu" displayName="%CollectIommu" boolean:visible="true" cliName="iommu">
      <description>%CollectIommuDescription</description>
      <boolean:defaultValue>false</boolean:defaultValue>
     </booleanKnob>
    </xsl:if>
    <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectMemoryBW']"/>
    <xsl:if test="not (exsl:ctx('targetOS', '') = 'QNX' or exsl:ctx('targetOS', '') = 'INTEGRITY')">
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='dramBandwidthLimitsAT']"/>
    </xsl:if>
   </knobs>
  </groupKnob>
  <groupKnob id="groupForCustomControl1">
   <description>%SelectAPI</description>
   <knobs>
    <xsl:if test="exsl:ctx('targetOS') != 'FreeBSD'">
     <booleanKnob id="dpdkStack" displayName="%DpdkStack" boolean:visible="true" cliName="dpdk">
      <description>%DpdkStackDescription</description>
      <boolean:defaultValue>false</boolean:defaultValue>
     </booleanKnob>
    </xsl:if>
    <booleanKnob id="spdkStack" displayName="%SpdkStack" boolean:visible="true" cliName="spdk">
     <description>%SpdkStackDescription</description>
     <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>
    <xsl:if test="exsl:ctx('targetOS') != 'FreeBSD'">
     <booleanKnob id="kernelStack" displayName="%KernelStack" boolean:visible="true" cliName="kernel-stack">
      <description>%KernelStackDescription</description>
      <boolean:defaultValue>false</boolean:defaultValue>
     </booleanKnob>
    </xsl:if>
   </knobs>
  </groupKnob>
 </knobs>
 <analysis xsl:version="1.0" exsl:keep_exsl_namespace="">
  <collector id="runsa">
   <xsl:if test="exsl:ctx('platformType', '0') = '146'">
    <xsl:value-of select="exsl:error('%UnknownPMUForAT')"/>
   </xsl:if>
   <xsl:if test="exsl:ctx('kernelStack', 0)">
    <xsl:choose>
     <xsl:when test="exsl:ctx('targetOS') = 'Android' or exsl:ctx('targetOS') = 'Linux'">
      <xsl:choose>
       <xsl:when test="exsl:ctx('isFunctionTracingAvailable', 'no')!='yes'">
        <xsl:value-of select="exsl:warning('%FunctionTracingNotAvailableIowaitApproximate')"/>
       </xsl:when>
       <xsl:when test="exsl:ctx('isFunctionTracingAvailable', 'no')='yes' and exsl:ctx('isIowaitTracingAvailable', 'no')!='yes'">
        <xsl:value-of select="exsl:warning('%UnsupportedKernelIowaitApproximate')"/>
       </xsl:when>
      </xsl:choose>
     </xsl:when>
    </xsl:choose>
   </xsl:if>
   <collectorKnob knob="cswitchMode">both</collectorKnob>
   <xsl:choose>
    <xsl:when test="exsl:ctx('targetOS') = 'Android' or exsl:ctx('targetOS') = 'Linux' or exsl:ctx('targetOS') = 'FreeBSD'">
     <boolean:collectorKnob knob="usePerf">false</boolean:collectorKnob>
     <boolean:collectorKnob knob="collectUserDataAllMode">true</boolean:collectorKnob>
    </xsl:when>
   </xsl:choose>
   <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
   <xsl:variable name="showInboundPCIeRequestsWarning" select="$pmuCommon//variables/ShowInboundPCIeRequestsWarning"/>
   <xsl:variable name="isBandwidthAvailable" select="$pmuCommon//variables/isDRAMBWAvailable"/>
   <xsl:variable name="showPerfPCIeDeviceMappingWarning" select="$pmuCommon//variables/ShowPerfPCIeDeviceMappingWarning"/>
   <xsl:if test="exsl:ctx('collectPCIeBW', 0)">
    <boolean:collectorKnob knob="collectPCIeBandwidth">true</boolean:collectorKnob>
    <xsl:if test="not(exsl:ctx('isSEPDriverAvailable', 0))">
     <collectorKnob knob="uncoreSamplingInterval">100</collectorKnob>
    </xsl:if>
    <xsl:if test="$showInboundPCIeRequestsWarning='true'">
     <xsl:value-of select="exsl:warning('%InboundPCIeRequestDetailsCanBeCollectedOnlyWithSep')"/>
    </xsl:if>
    <xsl:if test="$showPerfPCIeDeviceMappingWarning='true'">
     <xsl:value-of select="exsl:warning('%PCIeDeviceMappingPerfUnavailable')"/>
    </xsl:if>
   </xsl:if>
   <xsl:if test="exsl:ctx('collectMmio', 0)">
    <boolean:collectorKnob knob="collectMmioAccess">true</boolean:collectorKnob>
   </xsl:if>
   <xsl:if test="exsl:ctx('collectIommu', 0)">
    <boolean:collectorKnob knob="collectIOMMU">true</boolean:collectorKnob>
   </xsl:if>
   <boolean:collectorKnob knob="enablePEBSCollection">false</boolean:collectorKnob>
   <xsl:if test="exsl:ctx('collectMemoryBW', 0)">
    <xsl:choose>
     <xsl:when test="$isBandwidthAvailable='true'">
      <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
      <boolean:collectorKnob knob="enableDramBandwidthLimitsWarning">true</boolean:collectorKnob>
      <xsl:if test="exsl:ctx('PMU') != 'knl' and exsl:ctx('dramBandwidthLimitsAT', 0)">
       <collectorKnob knob="dramBandwidthLimits">true</collectorKnob>
      </xsl:if>
     </xsl:when>
     <xsl:otherwise>
      <xsl:value-of select="exsl:error('%BandwidthIsNotWorkWithoutSampling')"/>
      <boolean:collectorKnob knob="collectMemBandwidth">false</boolean:collectorKnob>
      <boolean:collectorKnob knob="enableDramBandwidthLimitsWarning">false</boolean:collectorKnob>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:if>
   <xsl:if test="exsl:ctx('kernelStack', 0) and exsl:ctx('spdkStack', 0)">
    <xsl:value-of select="exsl:error('%UnsupportedKernelAndSpdkProfiling')"/>
   </xsl:if>
   <xsl:choose>
    <xsl:when test="exsl:ctx('kernelStack', 0)">
     <boolean:collectorKnob knob="cpuByIoWaits">true</boolean:collectorKnob>
     <boolean:collectorKnob knob="collectIoWaits">true</boolean:collectorKnob>
     <boolean:collectorKnob knob="systemWideDiskIO">true</boolean:collectorKnob>
     <boolean:collectorKnob knob="collectFramesMode">false</boolean:collectorKnob>
    </xsl:when>
    <xsl:otherwise>
     <xsl:if test="exsl:ctx('spdkStack', 0)">
      <boolean:collectorKnob knob="cpuByIoWaits">true</boolean:collectorKnob>
      <boolean:collectorKnob knob="collectIoWaits">false</boolean:collectorKnob>
      <boolean:collectorKnob knob="systemWideDiskIO">false</boolean:collectorKnob>
      <boolean:collectorKnob knob="collectFramesMode">true</boolean:collectorKnob>
      <xsl:if test="exsl:is_experimental('spdk_memory_pools')">
       <boolean:collectorKnob knob="collectUserTasksEventsCountersMode">true</boolean:collectorKnob>
      </xsl:if>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:if test="(exsl:ctx('targetOS') != 'FreeBSD') and (exsl:ctx('kernelStack', 0) or exsl:ctx('dpdkStack', 0) or exsl:ctx('collectMmio', 0))">
    <collectorKnob knob="collectIoMode">stack</collectorKnob>
   </xsl:if>
   <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl')"/>
   <xsl:variable name="memBandwidthEvents" select="$pmuCommon//variables/memBandwidthEvents"/>
   <xsl:variable name="isInterSocketBandwidthAvailable" select="$pmuCommon//variables/isInterSocketBWAvailable"/>
   <xsl:variable name="qpiBandwidthEvents" select="$pmuCommon//variables/qpiBandwidthEvents"/>
   <xsl:variable name="PCIeBandwidthEvents" select="$pmuCommon//variables/PCIeBandwidthEvents"/>
   <xsl:variable name="MmioAccessEvents" select="$pmuCommon//variables/MmioAccessEvents"/>
   <xsl:variable name="IommuEvents" select="$pmuCommon//variables/IommuEvents"/>
   <xsl:variable name="IioClockticksEvent" select="$pmuCommon//variables/IioClockticksEvent"/>
   <xsl:variable name="HBMEvents" select="$pmuCommon//variables/HBMEvents"/>
   <xsl:variable name="isHBMBandwidthAvailable" select="$pmuCommon//variables/isHBMBWAvailable"/>
   <xsl:variable name="CXLEvents" select="$pmuCommon//variables/CXLEvents"/>
   <xsl:variable name="isCXLBandwidthAvailable" select="$pmuCommon//variables/isCXLBWAvailable"/>
   <xsl:variable name="allEvents">
    <xsl:value-of select="$events//events/cpi"/>
    <xsl:if test="exsl:ctx('collectPCIeBW', 0) and $PCIeBandwidthEvents and $PCIeBandwidthEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$PCIeBandwidthEvents"/>
    </xsl:if>
    <xsl:if test="exsl:ctx('collectMmio', 0) and $MmioAccessEvents and $MmioAccessEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$MmioAccessEvents"/>
    </xsl:if>
    <xsl:if test="exsl:ctx('collectIommu', 0) and $IommuEvents and $IommuEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$IommuEvents"/>
    </xsl:if>
    <xsl:if test="(exsl:ctx('collectPCIeBW', 0) and $PCIeBandwidthEvents != '') or (exsl:ctx('collectIommu', 0) and $IommuEvents != '')">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$IioClockticksEvent"/>
    </xsl:if>
    <xsl:if test="exsl:ctx('collectMemoryBW', 0) and $isBandwidthAvailable = 'true' and $memBandwidthEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$memBandwidthEvents"/>
     <xsl:if test="$isInterSocketBandwidthAvailable = 'true' and $qpiBandwidthEvents != ''">
      <xsl:text>,</xsl:text>
      <xsl:value-of select="$qpiBandwidthEvents"/>
     </xsl:if>
     <xsl:if test="$isHBMBandwidthAvailable = 'true' and $HBMEvents != ''">
      <xsl:text>,</xsl:text>
      <xsl:value-of select="$HBMEvents"/>
     </xsl:if>
     <xsl:if test="$isCXLBandwidthAvailable = 'true' and $CXLEvents != ''">
      <xsl:text>,</xsl:text>
      <xsl:value-of select="$CXLEvents"/>
     </xsl:if>
    </xsl:if>
   </xsl:variable>
   <collectorKnob knob="pmuEventConfig">
    <xsl:value-of select="exsl:merge_pmu_events($allEvents)"/>
   </collectorKnob>
   <boolean:collectorKnob knob="explicitUncoreEventsConfig">true</boolean:collectorKnob>
   <boolean:collectorKnob knob="enableMemoryObjectCorrelation">true</boolean:collectorKnob>
  </collector>
 </analysis>
</bag>
